#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include "BCpu.h"
#include "BCpuISelLowering.h"
#include "BCpuSubtarget.h"
#include "BCpuTargetMachine.h"
#include "MCTargetDesc/BCpuMCTargetDesc.h"

using namespace llvm;

#define DEBUG_TYPE "bcpu-isel"

namespace {

class BCpuDAGToDAGISel : public SelectionDAGISel {
  const BCpuSubtarget *Subtarget = nullptr;

public:
  static char ID;
  explicit BCpuDAGToDAGISel(BCpuTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<BCpuSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  bool SelectAddrFI(SDValue Addr, SDValue &Base);
  bool SelectBaseAddr(SDValue Addr, SDValue &Base);

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "BCpu DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "BCpuGenDAGISel.inc"
};

} // end anonymous namespace

char BCpuDAGToDAGISel::ID = 0;

/// This pass converts a legalized DAG into a BCpu-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createBCpuISelDag(BCpuTargetMachine &TM) {
  return new BCpuDAGToDAGISel(TM);
}

bool BCpuDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    return true;
  }
  return false;
}

bool BCpuDAGToDAGISel::SelectBaseAddr(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr))
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
  else
    Base = Addr;
  return true;
}

void BCpuDAGToDAGISel::Select(SDNode *Node) {
  // Already selected -> maybe error!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "WARNING post-isel opcode on isel pass: ";
               Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  unsigned Opcode = Node->getOpcode();

  // Do isel
  SDLoc DL(Node);
  MVT VT = Node->getSimpleValueType(0);

  switch (Opcode) {
  case ISD::FrameIndex: {
    SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i32);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(Node, CurDAG->getMachineNode(BCpu::ADDI, DL, VT, TFI, Imm));
    return;
  }
  }

  SelectCode(Node);
}
